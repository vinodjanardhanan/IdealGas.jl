var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IdealGas","category":"page"},{"location":"#IdealGas","page":"Home","title":"IdealGas","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This module is a part of ReactionEngine. The purpose of this module is to calculate the thermodynamic properties of gasphase and surface adsorbed species ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for IdealGas.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IdealGas]","category":"page"},{"location":"#IdealGas.elementWeight","page":"Home","title":"IdealGas.elementWeight","text":"Tuple of element weights. This is used for the calculation of molecular weights\n\n\n\n\n\n","category":"constant"},{"location":"#IdealGas.E0_CO-Tuple{Any, Any}","page":"Home","title":"IdealGas.E0_CO","text":"Function to calculate the standard potential for CO oxidation\n\nUsage:\n\nE0_CO(thermoObj, T)\n\nthermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\nT: Temperature in K\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.E0_H2-Tuple{Any, Any}","page":"Home","title":"IdealGas.E0_H2","text":"Function to calculate the standard potential for H2 oxidation.      This function uses the enthalpy of formation of water vapour.    \n\nUsage:\n\nE0_H2(thermoObj, T)\n\nthermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\nT: Temperature in K\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.Gmix-Tuple{SpeciesThermoObj, Float64, Float64, Vector{Float64}}","page":"Home","title":"IdealGas.Gmix","text":"Calculates the Gibbs free energy of a muxture in J/mol\n\nUsage\n\nGmix(thermoObj,T,p,mlf)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K \n'p::Float64' : total pressure Pa\n'mlf::Array{Float64,1} ': mole fractions\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.H-Tuple{IdealGas.NASAThermo, Float64}","page":"Home","title":"IdealGas.H","text":"H(thermo::NASAThermo, T::Float64) Calculates the enthalpy of pure species J/mol\n\nUsage-1:\n\nH(thermo,T)\n\n'thermo::NASAThermo': NASAThermo of the species\n'T::Float64': Temperature in K at which the property is required   \n\nUsage-2:\n\nH(sp,T,thermo,ig)\n\nsp::String : species name\nT::Float64 : Temperature K\nthermoObj::SpeciesThermoObj : Structure of SpeciesThermoObj\nspecies_list::Array{String,1}  : List of species \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.H_all-Tuple{SpeciesThermoObj, Float64}","page":"Home","title":"IdealGas.H_all","text":"Calculates the enthalpy of all species in J/mol\n\nUsage\n\nH_all(td,T)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K at which the property is rquired\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.Hmix-Tuple{SpeciesThermoObj, Float64, Vector{Float64}}","page":"Home","title":"IdealGas.Hmix","text":"Hmix(thermoObj::SpeciesThermoObj,T::Float64,mlf::Array{Float64,1})     Calculates the enthalpy of a mixture J/mol\n\nUsage\n\nHmix(td,T,mlf)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K\n'mlf::Array{Float64,1}' : species mole fractions    \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.S-Tuple{IdealGas.NASAThermo, Float64}","page":"Home","title":"IdealGas.S","text":"S(thermo::NASAThermo, T::Float64) Calculates the entropy of pure species J/mol-K\n\nUsage-1:\n\nS(thermo,T)\n\nthermo::NASAThermo: NASAThermo of the species\nT::Float64: Temperature in K at which the property is required    \n\nUsage-2:\n\nS(sp,T,thermo,ig)\n\nsp::String : species name\nT::Float64 : Temperature K\nthermo::SpeciesThermoObj : Structure of SpeciesThermoObj\nspecies_list::Array{String,1}  : List of species \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.S_all-Tuple{SpeciesThermoObj, Float64}","page":"Home","title":"IdealGas.S_all","text":"Calculates the entropy of all species in J/mol-K\n\nUsage\n\nS_all(td,T)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K at which the property is rquired\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.Smix-Tuple{SpeciesThermoObj, Float64, Float64, Vector{Float64}}","page":"Home","title":"IdealGas.Smix","text":"Smix(thermoObj::SpeciesThermoObj,T::Float64,p::Float64,mlf::Array{Float64,1}) Calculates the entropy of a muxture in J/mol-K\n\nUsage\n\nSmix(thermoObj,T,p,mlf)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K \n'p::Float64' : total pressure Pa\n'mlf::Array{Float64,1} ': mole fractions\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.cp-Tuple{IdealGas.NASAThermo, Float64}","page":"Home","title":"IdealGas.cp","text":"Calculate the specific heat of pure species J/mol-K\n\nUsage-1:\n\ncp(thermo,T)\n\nthermo::NASAThermo: NASAThermo of the species\nT::Float64: Temperature in K at which the property is required    \n\nUsage-2:\n\ncp(sp,T,thermo,ig)\n\nsp::String : species name\nT::Float64 : Temperature K\nthermoObj::SpeciesThermoObj : Structure of SpeciesThermoObj\nspecies_list::Array{String,1}  : List of species \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.cp_all-Tuple{SpeciesThermoObj, Float64}","page":"Home","title":"IdealGas.cp_all","text":"Calculates the specific heat of all species in J/mol-K\n\nUsage\n\ncp_all(td,T)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K at which the property is rquired\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.cpmix-Tuple{SpeciesThermoObj, Float64, Vector{Float64}}","page":"Home","title":"IdealGas.cpmix","text":"Calculates the specific heat of a mixture in J/mol-K\n\nUsage\n\ncpmix(td,T,mlf)\n\n'thermoObj::SpeciesThermoObj' : Structure of SpeciesThermoObj\n'T::Float64' : Temperature in K\n'mlf::Array{Float64,1}' : species mole fractions    \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.create_thermo-Union{Tuple{T}, Tuple{Vector{T}, AbstractString}} where T<:AbstractString","page":"Home","title":"IdealGas.create_thermo","text":"Function to create thermo object. The function reads the therm.dat file and  parses the content based on the ideal gas object to create the thermo data object The function returns SpeciesThermoObj\n\nUsage:\n\ncreate_thermo(species::Array{T,1}, thermo_file::AbstractString )\n\nspecies  : Array of species names \nthermo_file : name of the thermo file including the path \n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.get_element_weight-Tuple{String}","page":"Home","title":"IdealGas.get_element_weight","text":"getelementweight(el)\n\nfunction to return the element weights\n\nUsage:\n\nget_element_weight(el)\n\n'el::String' : Element name\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.nernst-Tuple{Float64, Float64}","page":"Home","title":"IdealGas.nernst","text":"Function to calculate the Nernst potential for H2 oxidation\n\nUsage:\n\nnernst(E0, T; pH2, pO2, pH2O)\n\nE0 : standard potential for H2 oxidation\nT : Temperature in K\npH2 : Partial pressure of H2 (Pa)\npO2 : Partial pressure of O2 (Pa)\npH2O : Partial pressure of H2O (Pa)\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.nernst_co-Tuple{Float64, Float64}","page":"Home","title":"IdealGas.nernst_co","text":"Function to calculate the Nernst potential for CO oxidation\n\nUsage:\n\nnernst(E0, T; pCO, pO2, pCO2)\n\nE0 : standard potential for CO oxidation\nT : Temperature in K\npCO : Partial pressure of CO (Pa)\npO2 : Partial pressure of O2 (Pa)\npCO2 : Partial pressure of CO2 (Pa)\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.parase_thermo_species_data-Tuple{AbstractString}","page":"Home","title":"IdealGas.parase_thermo_species_data","text":"Function for parsing the first line of thermo data.     It returns the species name, phase, molecular weight, high      temperature, low temperature and Common temperature limits     Not for external calls\n\nUsage:\n\nparase_thermo_species_data(data_string)\n\n\n\n\n\n","category":"method"},{"location":"#IdealGas.parse_thermo_polynomials-Tuple{Int64, AbstractString}","page":"Home","title":"IdealGas.parse_thermo_polynomials","text":"This function will parse the polynomials     Not for external calls\n\n\n\n\n\n","category":"method"}]
}
